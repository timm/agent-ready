#summary this is the top page of the ARO documentation project
#labels featured,Teach,Admin
http://agent-ready.googlecode.com/svn/trunk/share/img/gangMedium.png

Note: ARO, pronounced "arrow",  is still pre-released. We expect a releasable version by December 2009.

----
== Context ==

ARO supports the following learning-oriented method of creating agents:
 * STOCK: add the agents, noting all the _choice_ points. 
 * STIR: add the agents to a simulation environment where they can execute in a sand box. Include a _goal_ predicate that reports how good (or bad) are the executions. 
 * SIMMER: add   incremental data miners that can watch the simmering and report what choices  select for better executions.
 * BOIL: condense the controllers of the agents to just the key choices.
 * SERVE: deploy the agents outside the STIR environment. Include all the information about critical choices and best agents found in BOIL.

----

== Under the Hood ==

ARO is a set of classes that automate incremental
data mining. With ARO, as a side-effect of using "_X_" (where "_X_" is an ARO class), you automatically get methods for determining
the ranges within "_X_" that most influence the output. 
In this way, ARO automates the SIMMER/BOIL stage by offering an pre-defined class library to the STOCK/STIR stage. 

----
== Why use ARO? ==

ARO is currently coded in Smalltalk (for the purposes of prototyping). To code new  ARO classes, the developer:
 * Needs to [SmallTricks know Smalltalk];
 * Needs to [Agents101 know agents];
 * Needs to [Sim101 know simulation];
 * Needs to [DataMining101 know incremental data mining].

But note, if the existing ARO library works for you, the developer only:
 * Needs to [SmallTricks know Smalltalk];
 * Needs to [Sim101 know simulation];
 * And the agent layer and data mining tricks are all "under-the-hood" and ignorable.
